package app

import (
	"dappswin/models"
	"fmt"
	"strings"

	"github.com/gin-gonic/gin"
	"github.com/golang/glog"
	"github.com/jinzhu/gorm"
)

const invitedLevel = 9

type InvitedUserPost struct {
	PageIndex int    `json:"page_index" binding:"required,gt=0,lt=100"`
	OrderBy   string `json:"order_by" binding:"required,len=9"`
	PageSize  int    `json:"page_size" binding:"required,gt=0,lt=100"`
	Name      string `json:"name" binding:"required,max=12"`
}

type InvitedUserRsp struct {
	Count int            `json:"count"`
	Data  []*models.User `json:"data"`
}

func pageUser(c *gin.Context) {
	body := &InvitedUserPost{}
	if err := c.ShouldBind(body); err != nil {
		// c.JSON(NewMsg(400, "输入参数有误"))
		c.JSON(NewMsg(400, err.Error()))
		return
	}
	users := []*models.User{}
	// user := models.User{}
	var count int
	index := (body.PageIndex - 1) * body.PageSize

	if err := db.Where(models.User{PName: body.Name}).Offset(index).Limit(body.PageSize - 1).Order(body.OrderBy + " desc").Find(&users).Count(&count).Error; err != nil {
		c.JSON(NewMsg(500, "系统内部错误"))
		return
	}

	// // 这个业务需求需要加上自己到最前边， 送到前端展示
	// if unfound := db.Where(models.User{Name: body.Name}).First(&user).RecordNotFound(); !unfound {
	// 	users = append([]*models.User{&user}, users...)
	// }

	c.JSON(NewMsg(200, &InvitedUserRsp{count, users}))
}

func dateUser(c *gin.Context) {
	c.JSON(200, "NULL")
}

type loginUserPost struct {
	Name  string `json:"name" binding:"required,max=12"`
	PName string `json:"pname" binding:"required,max=12"`
}

func bindUser(c *gin.Context) {
	body := &loginUserPost{}
	if err := c.ShouldBind(body); err != nil {
		c.JSON(NewMsg(400, "输入参数有误"))
		return
	}
	user := models.User{}
	if err := db.Create(&models.User{Name: body.Name, PName: body.PName}).Error; err != nil {
		c.JSON(NewMsg(400, "被推荐用户已经存在，绑定无效"))
		return
	}
	// if user.PName != "" {
	// 	c.JSON(NewMsg(400, "已经绑定过了"))
	// 	return
	// }
	user.Name = body.Name

	// update pnames
	pUser := models.User{}
	if unfound := db.Where("name = ?", body.PName).First(&pUser).RecordNotFound(); unfound {
		if err := db.Create(&models.User{Name: body.PName}).Error; err != nil {
			c.JSON(NewMsg(500, "系统内部错误"))
			return
		}
	}
	user.PNames = genPnames(body.PName, pUser.PNames)

	if err := db.Model(&user).Where("name = ?", body.Name).Update(&user).Error; err != nil {
		c.JSON(NewMsg(500, "系统内部错误"))
		return
	}
	glog.Info("user.Pnames is ", user.PNames)
	go updatePnamesChildren(user.PNames)

	c.JSON(NewMsg(200, "绑定成功"))
}

// xiaopingeob6,xiaopingeob5,xiaopingeob4,xiaopingeob3,xiaopingeob2,xiaopingeob1,xiaopingeoa5,xiaopingeoa4,xiaopingeoa3
// 只取父级的前8代奖励
func genPnames(pname string, pnames string) string {
	var result = pname
	for index, name := range strings.SplitN(pnames, ",", invitedLevel) {
		// index 从零开始的
		if name == "" || index == invitedLevel-1 {
			break
		}
		result += "," + name
	}
	return result
}

// 往上更新9代的children count
func updatePnamesChildren(pnames string) error {
	var err error
	for index, pname := range strings.SplitN(pnames, ",", invitedLevel) {
		if pname == "" {
			break
		}
		glog.Info(index, pname)
		err = db.Model(&models.User{}).Where("name = ?", pname).Update("children_count", gorm.Expr("children_count + ?", 1)).Error
		if err != nil {
			glog.Error(err)
			break
		}
	}
	return err
}

// Generated by https://quicktype.io

type DateUserPost struct {
	PageIndex int64    `json:"page_index" binding:"required,gt=0,lt=100"`
	PageSize  int64    `json:"page_size" binding:"required,gt=0,lt=100"`
	Date      []string `json:"date" binding:"required,len=2"`
	PName     string   `json:"pid" binding:"required,max=12"`
}

var invitedReward = [invitedLevel]float64{0.1, 0.05, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02}

func updateUsersFromTX(tx *models.Tx) {
	name := tx.From
	amount := tx.Amount
	user := models.User{}

	if tx.CoinID != eos {
		return
	}

	if unfound := db.Where("name = ?", name).First(&user).RecordNotFound(); unfound {
		user.Name = name
		if err := db.Create(&user).Error; err != nil {
			glog.Error(err)
			return
		}
	}

	user.Bet += amount
	user.TotalBet += amount
	db.Model(&models.User{}).Where("name = ?", name).Update(&user)

	if level := getNewVIP(user.Name, user.TotalBet); level > user.Level {
		db.Model(&models.User{}).Where("name = ?", user.Name).Update("level", level)
		// TODO: VIP changed send 奖励。
		sendTokens(user.Name, fmt.Sprintf("%0.4f EOS", 2.2), "达到新贵宾等级奖励")
	}

	for index, pname := range strings.SplitN(user.PNames, ",", invitedLevel) {
		if pname == "" {
			break
		}
		pUser := models.User{}
		db.Model(&models.User{}).Where("name = ?", pname).First(&pUser)
		pUser.TotalBet += amount
		rebate := amount * 0.2 * invitedReward[index]
		pUser.TotalRebate += rebate
		db.Model(&models.User{}).Where("name = ?", pname).Update(&pUser)
		glog.Infof("sending rebate to pname %s ==> %f", pname, rebate)
		if _, err := sendTokens(pname, fmt.Sprintf("%0.4f %s", rebate, coinNames[tx.CoinID]), "来自邀请下属的奖励"); err != nil {
			glog.Error(err)
		}
	}

}
